###############################################
# Text/dialog front-end function declarations #
###############################################

# Display a message box
info_window()
{
	dialog --backtitle "$backtitle" --title "$title" --msgbox "$dialogtext" 0 0
}

ask_question()
{
	dialog --backtitle "$backtitle" --title "$questiontitle" --yesno "$dialogtext" 0 0
	Answer=$?
}

apt_update_interactive()
{
  apt-get update | dialog --progressbox "Updating package databases..." 20 90
}

# Installs a package
install_package_interactive()
{
	debconf-apt-progress --dlwaypoint 50 -- apt-get -y install $PkgName
	sleep 1 # Prevent possible dpkg race condition (had that with Xubuntu 12.04 for some reason)
}

remove_xrdp_package_interactive()
{
	debconf-apt-progress --dlwaypoint 50 -- apt-get -y remove xrdp
}

remove_xrdp_package_noninteractive()
{
	apt-get -y remove xrdp
}

downloadX11rdp_inter()
{
	svn co svn://server1.xrdp.org/srv/svn/repos/main/x11rdp_xorg71 | dialog  --progressbox "Downloading X11rdp source from SVN repo..." 20 90
}

downloadX11rdp_noninter()
{
	echo "Downloading X11rdp source from SVN repository..."
	svn -q co svn://server1.xrdp.org/srv/svn/repos/main/x11rdp_xorg71
}

download_xrdp_inter()
{
	git clone https://github.com/FreeRDP/xrdp.git xrdp.git 2>&1 | dialog  --progressbox "Downloading xrdp source..." 20 90
}

download_xrdp_noninter()
{
	echo "Downloading xrdp source from the GIT repository..."
	git clone https://github.com/FreeRDP/xrdp.git xrdp.git
}

compile_X11rdp_interactive()
{
  cd $workingdir/x11rdp_xorg71
  (sh buildx.sh /opt/X11rdp) 2>&1 | dialog  --progressbox "Compiling and installing X11rdp..." 20 90
}

compile_xrdp_interactive()
{
  cd $workingdir/xrdp.git
  git checkout 4cd0c118c273730043cc77b749537dedc7051571 # revert to an earlier, working version
(	./bootstrap
	./configure --prefix=/usr --sysconfdir=/etc --localstatedir=/var
	make
	make install) 2>&1 | dialog  --progressbox "Compiling and installing xrdp..." 20 90
}

# Reads all normal (non-system) accounts in from /etc/passwd, and presents them as a list
# If your system also has "machine accounts" (i.e. accounts for PC's to be added under a
# SAMBA domain controller - marked with a "$" at the end) these will be ignored.
# smbguest is also ignored.
select_local_user_accounts_to_config()
{
	if [ -e ./usernames.tmp ]
	then
	  rm ./usernames.tmp
	fi
	userlist=""
	usercount=0
	linecount=`cat /etc/passwd | wc -l`
	processed=0
	percent=0
	title="Processing local users in /etc/passwd..."
	hit=""
(	while read line
	do 
    userno=`echo $line | cut -d":" -f3`
		if [ $userno -gt 999 ] && [ $userno -lt 65534 ]
		then
			username=`echo $line | cut -d":" -f1`
			if [[ $username != *$ && $username != *smbguest* ]]
			then
				realname=`echo $line | cut -d":" -f5 | cut -d"," -f1`
        hit="\nAdded username $username to list."
				let "usercount += 1"
			  echo "$username.$realname">> ./usernames.tmp
			fi
		fi
			let "processed += 1"
			percent=$((${processed}*100/${linecount}))
			echo "Processed $processed of $linecount entries in /etc/passwd ...$hit"
			echo XXX
			echo $percent
	done </etc/passwd ) | dialog --backtitle "$backtitle" --title "$title" "$@" --gauge "Processing..." 10 70 0
  
  allusers=""
  usercount=0
  while read line
  do
    username=$(echo $line | cut -d"." -f1)
    allusers="$allusers $username"
    realname=$(echo $line | cut -d"." -f2)
		if [ $usercount == 0 ]
		then
			userlist=("ALL USERS" "Select all users on this list" off "${username[@]}" "${realname[@]}" off )
		else
			userlist=("${userlist[@]}" "${username[@]}" "${realname[@]}" off )
		fi
		let "usercount += 1"
	done < ./usernames.tmp
   
	windowsize=(0 0 0)
	dialog_param=("--separate-output" "--backtitle" "$backtitle" "--checklist" "Select the user accounts you wish to configure..." "${windowsize[@]}" "${userlist[@]}")
#	selectedusers=$(dialog "${dialog_param[@]}" 2>&1 >/dev/tty)
  echo allusers = $allusers

#  if [ "$selectedusers" == "" ]
#  then
#    dialog --backtitle "$backtitle" --title "No Users Were Selected" --msgbox "\nYou did not select any users!\n\nQuitting the utility now.\n\nClick OK to exit.\n\n" 0 0
#    exit
#  fi

selectedusers="ALL USERS"
 
  if [ "$selectedusers" == "ALL USERS" ]
  then
    selectedusers=$allusers
  fi
}

create_desktop_dialog_list()
{
	case $Dist in
	*Xubuntu*)
		desktoplist=( "Xfce" "Xfce Desktop" on ) # Offering anything other than Xfce on Xubuntu (even though we can) misses the whole point of Xubuntu.
		;;
	Ubuntu*)
		desktoplist=( "Gnome Classic" "Classic Gnome Desktop" on  "Xfce" "Xfce Desktop" off "LXDE" "LXDE Desktop" off "KDE" "KDE Desktop" off "Unity-2D" "Unity 2D Desktop" off )
		;;
	Debian*)
		desktoplist=( "Gnome Classic" "Classic Gnome Desktop" on  "Xfce" "Xfce Desktop" off "LXDE" "LXDE Desktop" off "KDE" "KDE Desktop" off )
		;;
	*Mint*)
		desktoplist=( "Gnome Classic" "Classic Gnome Desktop" on  "Xfce" "Xfce Desktop" off "LXDE" "LXDE Desktop" off "MATE" "MATE Desktop" off )
		;;
	esac
}

# creates a .xsession file for each selected local user account
# based on the selected desktop environment
create_xsession()
{
(		for username in $selectedusers
		do
			homedir=`grep "^$username:" /etc/passwd | cut -d":" -f6`
			echo "Creating .xsession file for $username in $homedir with entry \"$session\".." 2>&1
			echo $session > $homedir/.xsession
			chown $username:$username $homedir/.xsession
			chmod u+x $homedir/.xsession
		done) | dialog --backtitle "$backtitle" --title "creating .xsession files..." --progressbox "Processing..." 10 80
		sleep 3
}

select_desktop()
{
	title="RDPsesconfig"
	backtitle="Scarygliders RDPsesconfig"
	windowsize=(0 0 0)
	dialog_param=("--backtitle" "$backtitle" "--radiolist" "$title" "${windowsize[@]}" "${desktoplist[@]}")
	desktop=$($DIALOG "${dialog_param[@]}" 2>&1 >/dev/tty)
}

